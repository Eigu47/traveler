// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface travelAdvisorApi {
  data: Datum[];
  filters: Filters;
  filters_v2: FiltersV2;
  paging: Paging;
}

export interface Datum {
  location_id: string;
  name?: string;
  latitude?: string;
  longitude?: string;
  num_reviews?: string;
  timezone?: Timezone;
  location_string?: LocationString;
  photo?: Photo;
  awards?: any[];
  location_subtype?: LocationSubtype;
  doubleclick_zone: DoubleclickZone;
  preferred_map_engine?: PreferredMapEngine;
  raw_ranking?: string;
  ranking_geo?: ParentDisplayName;
  ranking_geo_id?: string;
  ranking_position?: string;
  ranking_denominator?: string;
  ranking_category?: RankingCategory;
  ranking_subcategory?: string;
  subcategory_ranking?: string;
  ranking?: string;
  distance?: string;
  distance_string?: string;
  bearing?: string;
  rating?: string;
  is_closed?: boolean;
  is_long_closed?: boolean;
  description?: string;
  web_url?: string;
  write_review?: string;
  ancestors: Ancestor[];
  category?: Category;
  subcategory?: Category[];
  parent_display_name?: ParentDisplayName;
  is_jfy_enabled?: boolean;
  nearest_metro_station?: any[];
  address_obj?: AddressObj;
  address?: string;
  is_candidate_for_contact_info_suppression?: boolean;
  subtype?: Category[];
  open_now_text?: string;
  phone?: string;
  website?: string;
  hours?: Hours;
  ad_position?: string;
  ad_size?: string;
  detail?: string;
  page_type?: string;
  mob_ptype?: string;
  email?: string;
}

export interface AddressObj {
  street1: string;
  street2: null | string;
  city: ParentDisplayName;
  state: ParentDisplayName;
  country: ParentDisplayName;
  postalcode: string;
}

export enum ParentDisplayName {
  Japan = "Japan",
  KanagawaPrefecture = "Kanagawa Prefecture",
  Kanto = "Kanto",
  Kawasaki = "Kawasaki",
  Yokohama = "Yokohama",
}

export interface Ancestor {
  subcategory: Category[];
  name: ParentDisplayName;
  abbrv: null;
  location_id: string;
}

export interface Category {
  key: string;
  name: string;
}

export enum DoubleclickZone {
  AsJapanKanto = "as.japan.kanto",
}

export interface Hours {
  week_ranges: Array<WeekRange[]>;
  timezone: Timezone;
}

export enum Timezone {
  AsiaTokyo = "Asia/Tokyo",
}

export interface WeekRange {
  open_time: number;
  close_time: number;
}

export enum LocationString {
  KawasakiKanagawaPrefectureKanto = "Kawasaki, Kanagawa Prefecture, Kanto",
  YokohamaKanagawaPrefectureKanto = "Yokohama, Kanagawa Prefecture, Kanto",
}

export enum LocationSubtype {
  None = "none",
}

export interface Photo {
  images: Images;
  is_blessed: boolean;
  uploaded_date: string;
  caption: string;
  id: string;
  helpful_votes: string;
  published_date: string;
  user: User;
}

export interface Images {
  small: Large;
  thumbnail: Large;
  original: Large;
  large: Large;
  medium: Large;
}

export interface Large {
  width: string;
  url: string;
  height: string;
}

export interface User {
  user_id: null;
  member_id: string;
  type: Type;
}

export enum Type {
  User = "user",
}

export enum PreferredMapEngine {
  Default = "default",
}

export enum RankingCategory {
  Attraction = "attraction",
}

export interface Filters {
  distance: { [key: string]: Distance };
  subtype: { [key: string]: Distance };
  min_rating: { [key: string]: Distance };
  rating: Rating;
  neighborhood: Neighborhood;
  subcategory: { [key: string]: Distance };
  typeahead_tag: { [key: string]: Distance };
  exclude_locations: ExcludeLocations;
}

export interface Distance {
  count: string;
  label: string;
  priority?: string;
  selected: boolean;
  locale_independent_label?: string;
  parent_id?: string;
}

export interface ExcludeLocations {
  filtered: All;
  all: All;
}

export interface All {
  count: string;
  label: string;
}

export interface Neighborhood {
  "20928917": Distance;
}

export interface Rating {
  "1": Distance;
  "2": Distance;
  "3": Distance;
  "4": Distance;
  "5": Distance;
  all: Distance;
}

export interface FiltersV2 {
  search_filters: any[];
  filter_sections: FilterSection[];
  metadata: Metadata;
}

export interface FilterSection {
  label: string;
  section_id: string;
  filter_groups: FilterGroup[];
  parent_section_id?: string;
}

export interface FilterGroup {
  type: string;
  key: string;
  tracking_key: string;
  label: string;
  options: Option[];
}

export interface Option {
  label: string;
  value: string;
  selected: boolean;
  default: boolean;
  single_select?: boolean;
  count?: string;
  parent_id?: string;
}

export interface Metadata {
  sort: string;
}

export interface Paging {
  results: string;
  total_results: string;
}
